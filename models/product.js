const mongodb = require('mongodb');
const getDb = require('../util/database').getDb;

module.exports = class Product {
    constructor(id, title, imageUrl, description, price, stockQuantity = 0, category = null, origin = '') {
        this._id = id ? new mongodb.ObjectId(id) : null;
        this.title = title;
        this.imageUrl = imageUrl;
        this.description = description;
        this.price = parseFloat(price);
        this.stockQuantity = parseInt(stockQuantity);
        this.category = category;
        this.origin = origin || '';
        this.createdAt = new Date();
        this.updatedAt = new Date();
    }

    async save() {
        try {
            const db = getDb();
            let result;

            if (this._id) {
                // C·∫≠p nh·∫≠t s·∫£n ph·∫©m
                this.updatedAt = new Date();
                result = await db.collection('products').updateOne(
                    { _id: this._id },
                    {
                        $set: {
                            title: this.title,
                            imageUrl: this.imageUrl,
                            description: this.description,
                            price: this.price,
                            stockQuantity: this.stockQuantity,
                            category: this.category,
                            origin: this.origin,
                            updatedAt: this.updatedAt
                        }
                    }
                );
                console.log('ƒê√£ c·∫≠p nh·∫≠t s·∫£n ph·∫©m:', result);
            } else {
                // Th√™m s·∫£n ph·∫©m m·ªõi
                result = await db.collection('products').insertOne({
                    title: this.title,
                    imageUrl: this.imageUrl,
                    description: this.description,
                    price: this.price,
                    stockQuantity: this.stockQuantity,
                    category: this.category,
                    origin: this.origin,
                    createdAt: this.createdAt,
                    updatedAt: this.updatedAt
                });
                console.log('ƒê√£ th√™m s·∫£n ph·∫©m m·ªõi:', result);
            }
            return result;
        } catch (err) {
            console.error('L·ªói khi l∆∞u s·∫£n ph·∫©m:', err);
            throw err;
        }
    }

    static async fetchAll() {
        try {
            const db = getDb();
            console.log('ƒêang l·∫•y danh s√°ch s·∫£n ph·∫©m t·ª´ MongoDB...');
            const products = await db.collection('products')
                .find()
                .sort({ createdAt: -1 })
                .toArray();
            console.log('S·ªë s·∫£n ph·∫©m t√¨m th·∫•y:', products.length);
            return products;
        } catch (err) {
            console.error('L·ªói khi l·∫•y danh s√°ch s·∫£n ph·∫©m:', err);
            throw err;
        }
    }

    static async find(filter = {}) {
        try {
            const db = getDb();
            console.log('ƒêang t√¨m s·∫£n ph·∫©m v·ªõi filter:', filter);
            const products = await db.collection('products')
                .find(filter)
                .sort({ createdAt: -1 })
                .toArray();
            console.log('S·ªë s·∫£n ph·∫©m t√¨m th·∫•y:', products.length);
            return products;
        } catch (err) {
            console.error('L·ªói khi t√¨m s·∫£n ph·∫©m:', err);
            throw err;
        }
    }

    static async findById(productId) {
        try {
            const db = getDb();
            console.log('ƒêang t√¨m s·∫£n ph·∫©m v·ªõi ID:', productId);
            const product = await db.collection('products')
                .findOne({ _id: new mongodb.ObjectId(productId) });
            console.log('K·∫øt qu·∫£ t√¨m ki·∫øm:', product);
            return product;
        } catch (err) {
            console.error('L·ªói khi t√¨m s·∫£n ph·∫©m:', err);
            throw err;
        }
    }

    static async deleteById(productId) {
        try {
            const db = getDb();
            const result = await db.collection('products')
                .deleteOne({ _id: new mongodb.ObjectId(productId) });
            console.log('ƒê√£ x√≥a s·∫£n ph·∫©m:', result);
            return result;
        } catch (err) {
            console.error('L·ªói khi x√≥a s·∫£n ph·∫©m:', err);
            throw err;
        }
    }

    static async findRelatedProducts(product, limit = 4) {
        try {
            const db = getDb();
            const relatedProducts = await db.collection('products')
                .find({
                    _id: { $ne: product._id },
                    price: {
                        $gte: product.price * 0.8,
                        $lte: product.price * 1.2
                    }
                })
                .limit(limit)
                .toArray();
            return relatedProducts;
        } catch (err) {
            console.error('L·ªói khi t√¨m s·∫£n ph·∫©m li√™n quan:', err);
            throw err;
        }
    }

    // C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng t·ªìn kho khi ƒë·∫∑t h√†ng th√†nh c√¥ng
    static async updateStock(productId, quantity) {
        try {
            if (!productId) {
                throw new Error('Product ID l√† b·∫Øt bu·ªôc');
            }
            if (!quantity || quantity <= 0) {
                throw new Error('S·ªë l∆∞·ª£ng ph·∫£i l·ªõn h∆°n 0');
            }

            const db = getDb();
            console.log(`üîÑ C·∫≠p nh·∫≠t t·ªìn kho: S·∫£n ph·∫©m ${productId}, gi·∫£m ${quantity}`);

            // S·ª≠ d·ª•ng findOneAndUpdate ƒë·ªÉ tr√°nh race condition
            const result = await db.collection('products').findOneAndUpdate(
                {
                    _id: new mongodb.ObjectId(productId),
                    stockQuantity: { $gte: quantity } // Ch·ªâ c·∫≠p nh·∫≠t n·∫øu ƒë·ªß t·ªìn kho
                },
                {
                    $inc: { stockQuantity: -quantity },
                    $set: { updatedAt: new Date() }
                },
                {
                    returnDocument: 'after',
                    projection: { title: 1, stockQuantity: 1 }
                }
            );

            if (!result.value) {
                throw new Error(`Kh√¥ng ƒë·ªß t·ªìn kho ho·∫∑c kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m v·ªõi ID: ${productId}`);
            }

            console.log(`‚úÖ ƒê√£ c·∫≠p nh·∫≠t t·ªìn kho s·∫£n ph·∫©m ${productId}: gi·∫£m ${quantity}, c√≤n l·∫°i: ${result.value.stockQuantity}`);
            return result.value;
        } catch (err) {
            console.error('‚ùå L·ªói khi c·∫≠p nh·∫≠t t·ªìn kho:', err);
            throw err;
        }
    }

    // C·∫≠p nh·∫≠t t·ªìn kho cho nhi·ªÅu s·∫£n ph·∫©m (khi ƒë·∫∑t h√†ng)
    static async updateStockForOrder(orderItems) {
        try {
            if (!orderItems || !Array.isArray(orderItems) || orderItems.length === 0) {
                console.warn('‚ö†Ô∏è updateStockForOrder: orderItems r·ªóng ho·∫∑c kh√¥ng h·ª£p l·ªá');
                return;
            }

            console.log('üîÑ B·∫Øt ƒë·∫ßu c·∫≠p nh·∫≠t t·ªìn kho cho ƒë∆°n h√†ng:', orderItems);

            const db = getDb();
            const session = db.client.startSession();

            try {
                await session.withTransaction(async () => {
                    const updatePromises = orderItems.map(async (item) => {
                        if (!item.productId || !item.quantity) {
                            console.warn('‚ö†Ô∏è updateStockForOrder: item kh√¥ng h·ª£p l·ªá:', item);
                            return;
                        }

                        const result = await db.collection('products').findOneAndUpdate(
                            {
                                _id: new mongodb.ObjectId(item.productId),
                                stockQuantity: { $gte: item.quantity }
                            },
                            {
                                $inc: { stockQuantity: -item.quantity },
                                $set: { updatedAt: new Date() }
                            },
                            {
                                returnDocument: 'after',
                                session,
                                projection: { title: 1, stockQuantity: 1 }
                            }
                        );

                        if (!result.value) {
                            throw new Error(`Kh√¥ng ƒë·ªß t·ªìn kho cho s·∫£n ph·∫©m: ${item.title || item.productId}`);
                        }

                        console.log(`‚úÖ ƒê√£ c·∫≠p nh·∫≠t t·ªìn kho: ${result.value.title} - gi·∫£m ${item.quantity}, c√≤n l·∫°i: ${result.value.stockQuantity}`);
                    });

                    await Promise.all(updatePromises);
                });

                console.log('‚úÖ ƒê√£ c·∫≠p nh·∫≠t t·ªìn kho cho t·∫•t c·∫£ s·∫£n ph·∫©m trong ƒë∆°n h√†ng');
            } finally {
                await session.endSession();
            }
        } catch (err) {
            console.error('‚ùå L·ªói khi c·∫≠p nh·∫≠t t·ªìn kho cho ƒë∆°n h√†ng:', err);
            throw err;
        }
    }

    // Ho√†n l·∫°i t·ªìn kho khi h·ªßy ƒë∆°n h√†ng
    static async restoreStock(productId, quantity) {
        try {
            if (!productId) {
                throw new Error('Product ID l√† b·∫Øt bu·ªôc');
            }
            if (!quantity || quantity <= 0) {
                throw new Error('S·ªë l∆∞·ª£ng ph·∫£i l·ªõn h∆°n 0');
            }

            const db = getDb();
            console.log(`üîÑ Ho√†n l·∫°i t·ªìn kho: S·∫£n ph·∫©m ${productId}, tƒÉng ${quantity}`);

            const result = await db.collection('products').findOneAndUpdate(
                { _id: new mongodb.ObjectId(productId) },
                {
                    $inc: { stockQuantity: quantity },
                    $set: { updatedAt: new Date() }
                },
                {
                    returnDocument: 'after',
                    projection: { title: 1, stockQuantity: 1 }
                }
            );

            if (!result.value) {
                throw new Error(`Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m v·ªõi ID: ${productId}`);
            }

            console.log(`‚úÖ ƒê√£ ho√†n l·∫°i t·ªìn kho s·∫£n ph·∫©m ${productId}: tƒÉng ${quantity}, t·ªïng: ${result.value.stockQuantity}`);
            return result.value;
        } catch (err) {
            console.error('‚ùå L·ªói khi ho√†n l·∫°i t·ªìn kho:', err);
            throw err;
        }
    }

    // Ho√†n l·∫°i t·ªìn kho cho nhi·ªÅu s·∫£n ph·∫©m (khi h·ªßy ƒë∆°n h√†ng)
    static async restoreStockForOrder(orderItems) {
        try {
            if (!orderItems || !Array.isArray(orderItems) || orderItems.length === 0) {
                console.warn('‚ö†Ô∏è restoreStockForOrder: orderItems r·ªóng ho·∫∑c kh√¥ng h·ª£p l·ªá');
                return;
            }

            console.log('üîÑ B·∫Øt ƒë·∫ßu ho√†n l·∫°i t·ªìn kho cho ƒë∆°n h√†ng b·ªã h·ªßy:', orderItems);

            const db = getDb();
            const session = db.client.startSession();

            try {
                await session.withTransaction(async () => {
                    const restorePromises = orderItems.map(async (item) => {
                        if (!item.productId || !item.quantity) {
                            console.warn('‚ö†Ô∏è restoreStockForOrder: item kh√¥ng h·ª£p l·ªá:', item);
                            return;
                        }

                        const result = await db.collection('products').findOneAndUpdate(
                            { _id: new mongodb.ObjectId(item.productId) },
                            {
                                $inc: { stockQuantity: item.quantity },
                                $set: { updatedAt: new Date() }
                            },
                            {
                                returnDocument: 'after',
                                session,
                                projection: { title: 1, stockQuantity: 1 }
                            }
                        );

                        if (!result.value) {
                            console.warn(`‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m ƒë·ªÉ ho√†n l·∫°i t·ªìn kho: ${item.productId}`);
                            return;
                        }

                        console.log(`‚úÖ ƒê√£ ho√†n l·∫°i t·ªìn kho: ${result.value.title} - tƒÉng ${item.quantity}, t·ªïng: ${result.value.stockQuantity}`);
                    });

                    await Promise.all(restorePromises);
                });

                console.log('‚úÖ ƒê√£ ho√†n l·∫°i t·ªìn kho cho t·∫•t c·∫£ s·∫£n ph·∫©m trong ƒë∆°n h√†ng b·ªã h·ªßy');
            } finally {
                await session.endSession();
            }
        } catch (err) {
            console.error('‚ùå L·ªói khi ho√†n l·∫°i t·ªìn kho cho ƒë∆°n h√†ng:', err);
            throw err;
        }
    }

    // Ki·ªÉm tra t·ªìn kho c√≥ ƒë·ªß kh√¥ng
    static async checkStockAvailability(productId, quantity) {
        try {
            if (!productId || !quantity || quantity <= 0) {
                return { available: false, message: 'Tham s·ªë kh√¥ng h·ª£p l·ªá', currentStock: 0 };
            }

            const db = getDb();
            const product = await db.collection('products').findOne(
                { _id: new mongodb.ObjectId(productId) },
                { projection: { title: 1, stockQuantity: 1 } }
            );

            if (!product) {
                return { available: false, message: 'S·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i', currentStock: 0 };
            }

            // ƒê·∫£m b·∫£o stockQuantity l√† s·ªë h·ª£p l·ªá
            const currentStock = parseInt(product.stockQuantity) || 0;

            if (currentStock < quantity) {
                return {
                    available: false,
                    message: `Ch·ªâ c√≤n ${currentStock} s·∫£n ph·∫©m trong kho`,
                    currentStock: currentStock,
                    requestedQuantity: quantity
                };
            }

            return {
                available: true,
                message: 'ƒê·ªß h√†ng trong kho',
                currentStock: currentStock,
                requestedQuantity: quantity
            };
        } catch (err) {
            console.error('‚ùå L·ªói khi ki·ªÉm tra t·ªìn kho:', err);
            return { available: false, message: 'C√≥ l·ªói x·∫£y ra khi ki·ªÉm tra t·ªìn kho', currentStock: 0 };
        }
    }

    // L·∫•y danh s√°ch s·∫£n ph·∫©m s·∫Øp h·∫øt h√†ng (t·ªìn kho <= 10)
    static async getLowStockProducts(limit = 20) {
        try {
            const db = getDb();
            const products = await db.collection('products')
                .find({
                    stockQuantity: { $gt: 0, $lte: 10 }
                })
                .sort({ stockQuantity: 1, updatedAt: -1 })
                .limit(limit)
                .toArray();

            return products;
        } catch (err) {
            console.error('‚ùå L·ªói khi l·∫•y danh s√°ch s·∫£n ph·∫©m s·∫Øp h·∫øt h√†ng:', err);
            return [];
        }
    }

    // L·∫•y th·ªëng k√™ t·ªìn kho
    static async getStockStatistics() {
        try {
            const db = getDb();

            const stats = await db.collection('products').aggregate([
                {
                    $group: {
                        _id: null,
                        totalProducts: { $sum: 1 },
                        totalStockValue: { $sum: { $multiply: ['$price', '$stockQuantity'] } },
                        inStock: { $sum: { $cond: [{ $gt: ['$stockQuantity', 10] }, 1, 0] } },
                        lowStock: { $sum: { $cond: [{ $and: [{ $gt: ['$stockQuantity', 0] }, { $lte: ['$stockQuantity', 10] }] }, 1, 0] } },
                        outOfStock: { $sum: { $cond: [{ $lte: ['$stockQuantity', 0] }, 1, 0] } }
                    }
                }
            ]).toArray();

            return stats[0] || {
                totalProducts: 0,
                totalStockValue: 0,
                inStock: 0,
                lowStock: 0,
                outOfStock: 0
            };
        } catch (err) {
            console.error('‚ùå L·ªói khi l·∫•y th·ªëng k√™ t·ªìn kho:', err);
            return {
                totalProducts: 0,
                totalStockValue: 0,
                inStock: 0,
                lowStock: 0,
                outOfStock: 0
            };
        }
    }
}