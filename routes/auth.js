const express = require('express');
const router = express.Router();
const path = require('path');
const fs = require('fs');
const User = require('../models/user');
const { sendPasswordChangeNotification } = require('../util/email');

// Th√™m import authController
const authController = require('../controllers/auth');

// Th√™m c√°c import c·∫ßn thi·∫øt
const isAuth = require('../middleware/is-auth');
const cartMiddleware = require('../middleware/cart');
const shopController = require('../controllers/shop');
const { validateUserRegistration } = require('../middleware/validation');
const upload = require('../middleware/avatar-upload');

console.log('=== [AUTH ROUTES] Auth routes loaded successfully ===');

// GET /login
router.get('/login', authController.getLogin);

// POST /login
router.post('/login', authController.postLogin);

// GET /forgot-password
router.get('/forgot-password', authController.getForgotPassword);

// POST /forgot-password
router.post('/forgot-password', authController.postForgotPassword);

// POST /logout
router.post('/logout', (req, res, next) => {
    console.log('üîÑ Logout request received from:', req.ip);
    
    req.session.destroy((err) => {
        if (err) {
            console.error('‚ùå L·ªói khi ƒëƒÉng xu·∫•t:', err);
            // Redirect v·ªõi th√¥ng b√°o l·ªói
            return res.redirect('/?logout=error');
        }
        
        console.log('‚úÖ ƒêƒÉng xu·∫•t th√†nh c√¥ng');
        // Redirect v·ªõi th√¥ng b√°o th√†nh c√¥ng
        res.redirect('/?logout=success');
    });
});

// GET /profile
router.get('/profile', async (req, res, next) => {
    if (!req.session.user) {
        return res.redirect('/auth/login');
    }
    
    try {
        // L·∫•y th√¥ng tin th·ªëng k√™ t·ª´ database
        const User = require('../models/user');
        const Order = require('../models/order');
        
        // L·∫•y user m·ªõi nh·∫•t t·ª´ database ƒë·ªÉ ƒë·∫£m b·∫£o avatar ƒë∆∞·ª£c c·∫≠p nh·∫≠t
        const updatedUser = await User.findById(req.session.user._id);
        if (updatedUser) {
            // C·∫≠p nh·∫≠t session v·ªõi th√¥ng tin m·ªõi nh·∫•t
            req.session.user = { ...req.session.user, ...updatedUser };
            await req.session.save();
        }
        
        // ƒê·∫øm s·ªë ƒë∆°n h√†ng c·ªßa user
        let orderCount = 0;
        try {
            orderCount = await Order.countDocuments({ userId: req.session.user._id });
        } catch (err) {
            orderCount = 0;
        }
        
        // ƒê·∫øm s·ªë s·∫£n ph·∫©m y√™u th√≠ch
        const favoritesCount = req.session.user.favorites ? req.session.user.favorites.length : 0;
        
        // C·∫≠p nh·∫≠t th√¥ng tin user v·ªõi th·ªëng k√™
        const userWithStats = {
            ...req.session.user,
            orderCount,
            favoritesCount
        };
        
        res.render('profile', {
            path: '/profile',
            pageTitle: 'Th√¥ng tin c√° nh√¢n',
            user: userWithStats,
            isAuthenticated: true,
            isAdmin: req.session.user && req.session.user.role === 'admin',
            success: req.query.success
        });
    } catch (err) {
        console.error('=== [PROFILE] L·ªói khi t·∫£i trang profile:', err);
        console.error('=== [PROFILE] Error stack:', err.stack);
        res.render('profile', {
            path: '/profile',
            pageTitle: 'Th√¥ng tin c√° nh√¢n',
            user: req.session.user,
            isAuthenticated: true,
            isAdmin: req.session.user && req.session.user.role === 'admin',
            success: req.query.success || null
        });
    }
});

// GET /profile/edit
router.get('/profile/edit', (req, res, next) => {
    if (!req.session.user) {
        return res.redirect('/auth/login');
    }
    res.render('profile-edit', {
        path: '/profile/edit',
        pageTitle: 'Ch·ªânh s·ª≠a th√¥ng tin c√° nh√¢n',
        user: req.session.user,
        isAuthenticated: true,
        isAdmin: req.session.user && req.session.user.role === 'admin',
        error: null,
        success: null
    });
});

// POST /profile/edit
router.post('/profile/edit', upload.single('avatar'), async (req, res, next) => {
    if (!req.session.user) {
        return res.redirect('/auth/login');
    }
    console.log('[DEBUG] req.body:', req.body);
    try {
        const { name, phone, address } = req.body;
        
        // Validation
        if (!name || name.trim().length === 0) {
            return res.render('profile-edit', {
                path: '/profile/edit',
                pageTitle: 'Ch·ªânh s·ª≠a th√¥ng tin c√° nh√¢n',
                user: req.session.user,
                isAuthenticated: true,
                isAdmin: req.session.user && req.session.user.role === 'admin',
                error: 'Vui l√≤ng nh·∫≠p h·ªç t√™n',
                success: null
            });
        }
        
        if (name.trim().length < 2) {
            return res.render('profile-edit', {
                path: '/profile/edit',
                pageTitle: 'Ch·ªânh s·ª≠a th√¥ng tin c√° nh√¢n',
                user: req.session.user,
                isAuthenticated: true,
                isAdmin: req.session.user && req.session.user.role === 'admin',
                error: 'H·ªç t√™n ph·∫£i c√≥ √≠t nh·∫•t 2 k√Ω t·ª±',
                success: null
            });
        }
        
        if (name.trim().length > 50) {
            return res.render('profile-edit', {
                path: '/profile/edit',
                pageTitle: 'Ch·ªânh s·ª≠a th√¥ng tin c√° nh√¢n',
                user: req.session.user,
                isAuthenticated: true,
                isAdmin: req.session.user && req.session.user.role === 'admin',
                error: 'H·ªç t√™n kh√¥ng ƒë∆∞·ª£c qu√° 50 k√Ω t·ª±',
                success: null
            });
        }
        
        // Validate phone number (optional)
        if (phone && phone.trim().length > 0) {
            const phoneRegex = /^[0-9+\-\s()]+$/;
            if (!phoneRegex.test(phone.trim())) {
                return res.render('profile-edit', {
                    path: '/profile/edit',
                    pageTitle: 'Ch·ªânh s·ª≠a th√¥ng tin c√° nh√¢n',
                    user: req.session.user,
                    isAuthenticated: true,
                    isAdmin: req.session.user && req.session.user.role === 'admin',
                    error: 'S·ªë ƒëi·ªán tho·∫°i kh√¥ng h·ª£p l·ªá',
                    success: null
                });
            }
        }
        
        // Validate address length (optional)
        if (address && address.trim().length > 200) {
            return res.render('profile-edit', {
                path: '/profile/edit',
                pageTitle: 'Ch·ªânh s·ª≠a th√¥ng tin c√° nh√¢n',
                user: req.session.user,
                isAuthenticated: true,
                isAdmin: req.session.user && req.session.user.role === 'admin',
                error: 'ƒê·ªãa ch·ªâ kh√¥ng ƒë∆∞·ª£c qu√° 200 k√Ω t·ª±',
                success: null
            });
        }
        
        // X·ª≠ l√Ω avatar upload v·ªõi multer
        let avatarUrl = req.session.user.avatarUrl; // Gi·ªØ nguy√™n avatar c≈©
        if (req.file) {
            avatarUrl = `/images/avatars/${req.file.filename}`;
        }
        
        // C·∫≠p nh·∫≠t th√¥ng tin user trong DB
        const User = require('../models/user');
        
        await User.updateProfile(req.session.user._id, {
            name: name.trim(),
            phone: phone ? phone.trim() : '',
            address: address ? address.trim() : '',
            avatarUrl: avatarUrl
        });
        
        // C·∫≠p nh·∫≠t session
        req.session.user.name = name.trim();
        req.session.user.phone = phone ? phone.trim() : '';
        req.session.user.address = address ? address.trim() : '';
        req.session.user.avatarUrl = avatarUrl;
        await req.session.save();
        
        // Redirect v·ªÅ trang profile ƒë·ªÉ hi·ªÉn th·ªã avatar m·ªõi
        res.redirect('/auth/profile?success=updated');
    } catch (err) {
        res.render('profile-edit', {
            path: '/profile/edit',
            pageTitle: 'Ch·ªânh s·ª≠a th√¥ng tin c√° nh√¢n',
            user: req.session.user,
            isAuthenticated: true,
            isAdmin: req.session.user && req.session.user.role === 'admin',
            error: 'C√≥ l·ªói x·∫£y ra khi c·∫≠p nh·∫≠t',
            success: null
        });
    }
});

// GET /profile/change-password
router.get('/profile/change-password', (req, res, next) => {
    if (!req.session.user) {
        return res.redirect('/auth/login');
    }
    res.render('profile-change-password', {
        path: '/profile/change-password',
        pageTitle: 'ƒê·ªïi m·∫≠t kh·∫©u',
        user: req.session.user,
        isAuthenticated: true,
        isAdmin: req.session.user && req.session.user.role === 'admin',
        error: null,
        success: null
    });
});

// POST /profile/change-password
router.post('/profile/change-password', async (req, res, next) => {
    if (!req.session.user) {
        return res.redirect('/auth/login');
    }
    console.log('[DEBUG] req.body:', req.body);
    try {
        const { oldPassword, newPassword, confirmPassword } = req.body;
        
        // Validation
        if (!oldPassword || !newPassword || !confirmPassword) {
            return res.render('profile-change-password', {
                path: '/profile/change-password',
                pageTitle: 'ƒê·ªïi m·∫≠t kh·∫©u',
                user: req.session.user,
                isAuthenticated: true,
                isAdmin: req.session.user && req.session.user.role === 'admin',
                error: 'Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin',
                success: null
            });
        }
        
        if (newPassword !== confirmPassword) {
            return res.render('profile-change-password', {
                path: '/profile/change-password',
                pageTitle: 'ƒê·ªïi m·∫≠t kh·∫©u',
                user: req.session.user,
                isAuthenticated: true,
                isAdmin: req.session.user && req.session.user.role === 'admin',
                error: 'M·∫≠t kh·∫©u m·ªõi v√† x√°c nh·∫≠n m·∫≠t kh·∫©u kh√¥ng kh·ªõp',
                success: null
            });
        }
        
        if (newPassword.length < 6) {
            return res.render('profile-change-password', {
                path: '/profile/change-password',
                pageTitle: 'ƒê·ªïi m·∫≠t kh·∫©u',
                user: req.session.user,
                isAuthenticated: true,
                isAdmin: req.session.user && req.session.user.role === 'admin',
                error: 'M·∫≠t kh·∫©u m·ªõi ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±',
                success: null
            });
        }
        
        const User = require('../models/user');
        const PasswordUtils = require('../util/password');
        const user = await User.findById(req.session.user._id);
        if (!user) {
            throw new Error('Kh√¥ng t√¨m th·∫•y user');
        }
        
        // Ki·ªÉm tra m·∫≠t kh·∫©u c≈©
        const isMatch = await PasswordUtils.comparePassword(oldPassword, user.password);
        if (!isMatch) {
            return res.render('profile-change-password', {
                path: '/profile/change-password',
                pageTitle: 'ƒê·ªïi m·∫≠t kh·∫©u',
                user: req.session.user,
                isAuthenticated: true,
                isAdmin: req.session.user && req.session.user.role === 'admin',
                error: 'M·∫≠t kh·∫©u c≈© kh√¥ng ƒë√∫ng',
                success: null
            });
        }
        
        console.log('[DEBUG] B·∫Øt ƒë·∫ßu x·ª≠ l√Ω ƒë·ªïi m·∫≠t kh·∫©u cho user:', req.session.user ? req.session.user.email : null);
        // Ki·ªÉm tra m·∫≠t kh·∫©u m·ªõi kh√¥ng ƒë∆∞·ª£c tr√πng v·ªõi m·∫≠t kh·∫©u c≈©
        if (oldPassword === newPassword) {
            console.log('[DEBUG] M·∫≠t kh·∫©u m·ªõi tr√πng v·ªõi m·∫≠t kh·∫©u c≈©');
            return res.render('profile-change-password', {
                path: '/profile/change-password',
                pageTitle: 'ƒê·ªïi m·∫≠t kh·∫©u',
                user: req.session.user,
                isAuthenticated: true,
                isAdmin: req.session.user && req.session.user.role === 'admin',
                error: 'M·∫≠t kh·∫©u m·ªõi kh√¥ng ƒë∆∞·ª£c tr√πng v·ªõi m·∫≠t kh·∫©u c≈©',
                success: null
            });
        }
        
        // Th·ª±c hi·ªán c·∫≠p nh·∫≠t m·∫≠t kh·∫©u
        console.log('[DEBUG] G·ªçi User.updatePassword v·ªõi userId:', req.session.user._id);
        const updateResult = await User.updatePassword(req.session.user._id, newPassword);
        console.log('[DEBUG] K·∫øt qu·∫£ updatePassword:', updateResult);
        if (!updateResult || updateResult.modifiedCount === 0) {
            console.log('[DEBUG] Kh√¥ng c·∫≠p nh·∫≠t ƒë∆∞·ª£c m·∫≠t kh·∫©u cho user:', req.session.user._id);
            return res.render('profile-change-password', {
                path: '/profile/change-password',
                pageTitle: 'ƒê·ªïi m·∫≠t kh·∫©u',
                user: req.session.user,
                isAuthenticated: true,
                isAdmin: req.session.user && req.session.user.role === 'admin',
                error: 'ƒê·ªïi m·∫≠t kh·∫©u th·∫•t b·∫°i. Vui l√≤ng th·ª≠ l·∫°i ho·∫∑c li√™n h·ªá h·ªó tr·ª£.',
                success: null
            });
        }
        
        // G·ª≠i email th√¥ng b√°o ƒë·ªïi m·∫≠t kh·∫©u
        try {
            await sendPasswordChangeNotification(user, newPassword);
        } catch (emailErr) {
            console.log('[DEBUG] L·ªói g·ª≠i email th√¥ng b√°o ƒë·ªïi m·∫≠t kh·∫©u:', emailErr);
        }
        
        console.log('[DEBUG] ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng cho user:', req.session.user.email);
        res.redirect('/auth/profile?success=password');
    } catch (err) {
        console.log('[DEBUG] L·ªói trong qu√° tr√¨nh ƒë·ªïi m·∫≠t kh·∫©u:', err);
        res.render('profile-change-password', {
            path: '/profile/change-password',
            pageTitle: 'ƒê·ªïi m·∫≠t kh·∫©u',
            user: req.session.user,
            isAuthenticated: true,
            isAdmin: req.session.user && req.session.user.role === 'admin',
            error: 'C√≥ l·ªói x·∫£y ra khi ƒë·ªïi m·∫≠t kh·∫©u',
            success: null
        });
    }
});

// GET /signup
router.get('/signup', (req, res, next) => {
    res.render('auth/signup', {
        path: '/signup',
        pageTitle: 'ƒêƒÉng k√Ω',
        error: null,
        isAuthenticated: req.session.user ? true : false,
        isAdmin: req.session.user && req.session.user.role === 'admin',
        user: req.session.user || null
    });
});



// GET /signup-success
router.get('/signup-success', (req, res, next) => {
    
    if (!req.session.user) {
        return res.redirect('/');
    }
    
    // Ki·ªÉm tra c·∫£ flag v√† query parameter
    const hasSuccessFlag = req.session.signupSuccess;
    const hasSuccessQuery = req.query.success === 'true';
    
    if (!hasSuccessFlag && !hasSuccessQuery) {
        return res.redirect('/');
    }
    
    // X√≥a flag ƒë·ªÉ tr√°nh hi·ªÉn th·ªã l·∫°i
    delete req.session.signupSuccess;
    
    res.render('auth/signup-success', {
        path: '/signup-success',
        pageTitle: 'ƒêƒÉng k√Ω th√†nh c√¥ng',
        user: req.session.user,
        isAuthenticated: true,
        isAdmin: req.session.user.role === 'admin'
    });
});

// POST /signup
router.post('/signup', validateUserRegistration, async (req, res, next) => {
    try {
        const { name, email, password, confirmPassword, phone, address } = req.body;
        
        if (!name || !email || !password || !confirmPassword) {
            return res.render('auth/signup', {
                path: '/signup',
                pageTitle: 'ƒêƒÉng k√Ω',
                error: 'Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin',
                isAuthenticated: false,
                isAdmin: false,
                user: null
            });
        }
        
        if (password !== confirmPassword) {
            return res.render('auth/signup', {
                path: '/signup',
                pageTitle: 'ƒêƒÉng k√Ω',
                error: 'M·∫≠t kh·∫©u nh·∫≠p l·∫°i kh√¥ng kh·ªõp',
                isAuthenticated: false,
                isAdmin: false,
                user: null
            });
        }
        
        if (phone && !/^\d{10,11}$/.test(phone)) {
            return res.render('auth/signup', {
                path: '/signup',
                pageTitle: 'ƒêƒÉng k√Ω',
                error: 'S·ªë ƒëi·ªán tho·∫°i kh√¥ng h·ª£p l·ªá',
                isAuthenticated: false,
                isAdmin: false,
                user: null
            });
        }
        
        const existingUser = await User.findByEmail(email);
        if (existingUser) {
            return res.render('auth/signup', {
                path: '/signup',
                pageTitle: 'ƒêƒÉng k√Ω',
                error: 'Email ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng',
                isAuthenticated: false,
                isAdmin: false,
                user: null
            });
        }
        
        // L∆∞u user m·ªõi
        const user = new User(name, email, password, 'user', [], phone, address);
        const newUser = await user.save();
        
        // G·ª≠i email x√°c nh·∫≠n
        const { sendSignupConfirmation } = require('../util/email');
        try {
            await sendSignupConfirmation(newUser);
        } catch (e) { 
            // Email confirmation failed, but continue
        }
        
        // T·ª± ƒë·ªông ƒëƒÉng nh·∫≠p
        req.session.user = newUser;
        await req.session.save();
        
        // Hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng tr∆∞·ªõc khi chuy·ªÉn trang
        req.session.signupSuccess = true;
        await req.session.save();
        
        // Redirect ƒë·∫øn trang success
        res.redirect('/auth/signup-success?success=true');
    } catch (err) {
        console.error('L·ªói ƒëƒÉng k√Ω:', err);
        res.render('auth/signup', {
            path: '/signup',
            pageTitle: 'ƒêƒÉng k√Ω',
            error: 'C√≥ l·ªói x·∫£y ra khi ƒëƒÉng k√Ω',
            isAuthenticated: false,
            isAdmin: false,
            user: null
        });
    }
});



// Th√™m c√°c route orders v√†o auth.js
router.get('/orders', isAuth, cartMiddleware, shopController.getOrders);
router.get('/orders/:orderId', isAuth, cartMiddleware, shopController.getOrderDetail);
router.post('/orders/:orderId/delete', isAuth, cartMiddleware, shopController.deleteOrder);
router.post('/orders/delete-all', isAuth, cartMiddleware, shopController.deleteAllOrders);
router.post('/orders/:orderId/cancel', isAuth, cartMiddleware, shopController.cancelOrder);
router.get('/download-invoice/:orderId', isAuth, cartMiddleware, shopController.getDownloadInvoice);
router.get('/orders/:orderId/invoice', isAuth, cartMiddleware, shopController.getDownloadInvoice);
module.exports = router;