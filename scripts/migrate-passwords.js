const mongoose = require('mongoose');
const PasswordUtils = require('../util/password');
const config = require('../config');

async function migratePasswords() {
    try {
        console.log('üîÑ B·∫Øt ƒë·∫ßu migrate m·∫≠t kh·∫©u...');
        
        // K·∫øt n·ªëi database v·ªõi c·∫•u h√¨nh ƒë∆°n gi·∫£n
        await mongoose.connect(config.database.uri, {
            useNewUrlParser: true,
            useUnifiedTopology: true
        });
        console.log('‚úÖ ƒê√£ k·∫øt n·ªëi database');
        
        const db = mongoose.connection.db;
        
        // L·∫•y t·∫•t c·∫£ users c√≥ m·∫≠t kh·∫©u ch∆∞a ƒë∆∞·ª£c m√£ h√≥a
        const users = await db.collection('users').find({
            password: { $exists: true, $ne: null }
        }).toArray();
        
        console.log(`üìä T√¨m th·∫•y ${users.length} users c·∫ßn migrate`);
        
        let successCount = 0;
        let errorCount = 0;
        
        for (const user of users) {
            try {
                // Ki·ªÉm tra xem m·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c m√£ h√≥a ch∆∞a
                if (user.password && !user.password.startsWith('$2a$') && !user.password.startsWith('$2b$')) {
                    console.log(`üîÑ Migrating password cho user: ${user.email}`);
                    
                    // M√£ h√≥a m·∫≠t kh·∫©u c≈©
                    const hashedPassword = await PasswordUtils.hashPassword(user.password);
                    
                    // C·∫≠p nh·∫≠t v√†o database
                    await db.collection('users').updateOne(
                        { _id: user._id },
                        { 
                            $set: { 
                                password: hashedPassword,
                                updatedAt: new Date()
                            } 
                        }
                    );
                    
                    successCount++;
                    console.log(`‚úÖ ƒê√£ migrate password cho: ${user.email}`);
                } else {
                    console.log(`‚è≠Ô∏è Password ƒë√£ ƒë∆∞·ª£c m√£ h√≥a cho: ${user.email}`);
                }
            } catch (error) {
                errorCount++;
                console.error(`‚ùå L·ªói khi migrate password cho ${user.email}:`, error.message);
            }
        }
        
        console.log('\nüìä K·∫øt qu·∫£ migrate:');
        console.log(`‚úÖ Th√†nh c√¥ng: ${successCount}`);
        console.log(`‚ùå L·ªói: ${errorCount}`);
        console.log(`üìà T·ªïng c·ªông: ${users.length}`);
        
        if (successCount > 0) {
            console.log('\nüéâ Migrate m·∫≠t kh·∫©u ho√†n th√†nh!');
        } else {
            console.log('\n‚ÑπÔ∏è Kh√¥ng c√≥ m·∫≠t kh·∫©u n√†o c·∫ßn migrate');
        }
        
    } catch (error) {
        console.error('‚ùå L·ªói khi migrate passwords:', error);
    } finally {
        await mongoose.disconnect();
        process.exit(0);
    }
}

// Ch·∫°y migration
migratePasswords(); 