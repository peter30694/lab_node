const { validationResult } = require('express-validator');
const Product = require('../../models/product');
const Category = require('../../models/category');
const { getDb } = require('../../util/database');
const { fixVietnameseTextForDB } = require('../../util/text-helper'); 
const { generateProductsPDF } = require('../../util/pdf');
const fs = require('fs');
const path = require('path');


exports.getAddProduct = async (req, res, next) => {
    try {
        const categories = await Category.find();
        res.render('admin/add-product', {
            pageTitle: 'Th√™m s·∫£n ph·∫©m',
            path: '/admin/add-product',
            editing: false,
            categories,
            product: {
                title: '',
                price: '',
                description: '',
                imageUrl: ''
            },
            isAuthenticated: req.session.user ? true : false,
            isAdmin: req.session.user && req.session.user.role === 'admin',
            user: req.session.user || null
        });
    } catch (err) {
        res.status(500).render('error/500', {
            pageTitle: 'L·ªói',
            path: '/error',
            message: 'Kh√¥ng th·ªÉ t·∫£i danh m·ª•c',
            isAuthenticated: req.session.user ? true : false,
            isAdmin: req.session.user && req.session.user.role === 'admin',
            user: req.session.user || null
        });
    }
};

exports.postAddProduct = async (req, res, next) => {
    try {
        // Ki·ªÉm tra quy·ªÅn admin
        if (!req.session.user || req.session.user.role !== 'admin') {
            return res.status(403).render('error/403', {
                pageTitle: 'L·ªói',
                path: '/error',
                message: 'B·∫°n kh√¥ng c√≥ quy·ªÅn th·ª±c hi·ªán thao t√°c n√†y',
                isAuthenticated: req.session.user ? true : false,
                isAdmin: req.session.user && req.session.user.role === 'admin'
            });
        }

        const { title, price, description, stockQuantity, category, origin } = req.body;
        const imageUrl = req.file ? '/images/products/' + req.file.filename : null;

        if (!imageUrl) {
            const categories = await Category.find();
            return res.status(400).render('admin/add-product', {
                pageTitle: 'Th√™m s·∫£n ph·∫©m',
                path: '/admin/add-product',
                editing: false,
                categories,
                product: {
                    title: title || '',
                    price: price || '',
                    description: description || '',
                    imageUrl: ''
                },
                errorMessage: 'Vui l√≤ng t·∫£i l√™n h√¨nh ·∫£nh s·∫£n ph·∫©m',
                isAuthenticated: req.session.user ? true : false,
                isAdmin: req.session.user && req.session.user.role === 'admin',
                user: req.session.user || null
            });
        }

        // Fix Vietnamese text encoding before saving
        const fixedTitle = fixVietnameseTextForDB(title);
        const fixedDescription = fixVietnameseTextForDB(description);
        const fixedCategory = fixVietnameseTextForDB(category);

        const product = new Product(
            null,
            fixedTitle,
            imageUrl,
            fixedDescription,
            parseFloat(price),
            parseInt(stockQuantity),
            fixedCategory,
            origin
        );

        await product.save();
        res.redirect('/admin/products');
    } catch (err) {
        console.error('L·ªói khi th√™m s·∫£n ph·∫©m:', err);
        res.status(500).render('error/500', {
            pageTitle: 'L·ªói',
            path: '/error',
            message: 'Kh√¥ng th·ªÉ th√™m s·∫£n ph·∫©m m·ªõi',
            isAuthenticated: req.session.user ? true : false,
            isAdmin: req.session.user && req.session.user.role === 'admin'
        });
    }
};

exports.getProducts = async (req, res, next) => {
    try {
        console.log('=== getProducts called ===');
        console.log('URL:', req.url);
        console.log('Method:', req.method);
        console.log('Query params:', req.query);
        console.log('Session user:', req.session.user);
        
        // Ki·ªÉm tra quy·ªÅn admin
        if (!req.session.user || req.session.user.role !== 'admin') {
            console.log('User not admin, redirecting to error page');
            return res.status(403).render('error/403', {
                pageTitle: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p',
                path: '/error',
                message: 'B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p trang n√†y',
                isAuthenticated: req.session.user ? true : false,
                isAdmin: false
            });
        }

        const search = req.query.search || '';
        const category = req.query.category || '';
        const sort = req.query.sort || '';
        const page = parseInt(req.query.page) || 1;
        const limit = parseInt(req.query.limit) || 10; // S·ªë s·∫£n ph·∫©m m·ªói trang
        
        console.log('Filter params:', { search, category, sort, page, limit });

        // Build filter object for server-side search
        let filter = {};
        if (search && search.trim()) {
            const searchRegex = new RegExp(search.trim().replace(/[.*+?^${}()|[\]\\]/g, '\\$&'), 'i');
            filter.$or = [
                { title: searchRegex },
                { description: searchRegex },
                { category: searchRegex }
            ];
        }
        if (category && category.trim()) {
            filter.category = category.trim();
        }

        // Th√™m filter tr·∫°ng th√°i t·ªìn kho
        if (req.query.stock) {
            switch (req.query.stock) {
                case 'low_stock':
                    filter.stockQuantity = { $gt: 0, $lte: 10 };
                    break;
                case 'out_of_stock':
                    filter.stockQuantity = { $lte: 0 };
                    break;
            }
        }

        // Build sort object for server-side sorting
        let sortObject = { createdAt: -1 }; // Default sort
        if (sort) {
            switch (sort) {
                case 'name_asc':
                    sortObject = { title: 1 };
                    break;
                case 'name_desc':
                    sortObject = { title: -1 };
                    break;
                case 'price_asc':
                    sortObject = { price: 1 };
                    break;
                case 'price_desc':
                    sortObject = { price: -1 };
                    break;
                case 'stock_asc':
                    sortObject = { stockQuantity: 1 };
                    break;
                case 'stock_desc':
                    sortObject = { stockQuantity: -1 };
                    break;
                default:
                    sortObject = { createdAt: -1 };
            }
        }

        // Get total count for pagination
        const db = getDb();
        const totalProducts = await db.collection('products').countDocuments(filter);
        const totalPages = Math.ceil(totalProducts / limit);
        
        // Get products with server-side pagination and sorting
        const skip = (page - 1) * limit;
        const products = await db.collection('products')
            .find(filter)
            .sort(sortObject)
            .skip(skip)
            .limit(limit)
            .toArray();
        
        console.log('Server-side search results:', {
            search,
            category,
            sort,
            totalProducts,
            currentPage: page,
            resultsCount: products.length
        });

        // Pagination logic (already calculated above)
        const startIndex = (page - 1) * limit;
        const endIndex = startIndex + limit;
        
        // Products are already paginated from database query
        const paginatedProducts = products;
        
        // Calculate pagination info
        const hasNextPage = page < totalPages;
        const hasPrevPage = page > 1;
        const nextPage = hasNextPage ? page + 1 : null;
        const prevPage = hasPrevPage ? page - 1 : null;
        
        // Generate page numbers for pagination
        const pageNumbers = [];
        const maxVisiblePages = 5;
        let startPage = Math.max(1, page - Math.floor(maxVisiblePages / 2));
        let endPage = Math.min(totalPages, startPage + maxVisiblePages - 1);
        
        if (endPage - startPage + 1 < maxVisiblePages) {
            startPage = Math.max(1, endPage - maxVisiblePages + 1);
        }
        
        for (let i = startPage; i <= endPage; i++) {
            pageNumbers.push(i);
        }
        
        // Get categories for filter dropdown
        const categories = [
            { slug: 'dog', name: 'Ch√≥ c∆∞ng', icon: 'üê∂' },
            { slug: 'cat', name: 'M√®o c∆∞ng', icon: 'üê±' },
            { slug: 'fish', name: 'C√° c·∫£nh', icon: 'üêü' },
            { slug: 'small-pets', name: 'Th√∫ nh·ªè', icon: 'üêπ' }
        ];

        console.log('Rendering admin/products with data:', {
            productsCount: paginatedProducts ? paginatedProducts.length : 0,
            totalProducts,
            totalPages,
            currentPage: page,
            categoriesCount: categories ? categories.length : 0,
            search,
            category,
            sort
        });
        
        res.render('admin/products', {
            prods: paginatedProducts || [],
            categories,
            search,
            category,
            sort,
            stock: req.query.stock || '',
            // Pagination data
            pagination: {
                currentPage: page,
                totalPages,
                totalProducts,
                hasNextPage,
                hasPrevPage,
                nextPage,
                prevPage,
                pageNumbers,
                limit
            },
            query: { search, category, sort, limit },
            pageTitle: 'Qu·∫£n l√Ω s·∫£n ph·∫©m',
            path: '/admin/products',
            isAuthenticated: req.session.user ? true : false,
            isAdmin: req.session.user && req.session.user.role === 'admin',
            user: req.session.user || null
        });
        
        console.log('=== getProducts completed successfully ===');
    } catch (err) {
        console.error('L·ªói khi l·∫•y danh s√°ch s·∫£n ph·∫©m:', err);
        res.status(500).render('error/500', {
            pageTitle: 'L·ªói',
            path: '/error',
            message: 'Kh√¥ng th·ªÉ t·∫£i danh s√°ch s·∫£n ph·∫©m',
            isAuthenticated: req.session.user ? true : false,
            isAdmin: req.session.user && req.session.user.role === 'admin'
        });
    }
};

exports.getEditProduct = async (req, res, next) => {
    const editMode = req.query.edit;
    if (!editMode) {
        return res.redirect('/');
    }

    const prodId = req.params.productId;
    try {
        const product = await Product.findById(prodId);
        if (!product) {
            return res.redirect('/');
        }

        res.render('admin/edit-product', {
            pageTitle: 'Ch·ªânh s·ª≠a s·∫£n ph·∫©m',
            path: '/admin/edit-product',
            editing: editMode,
            product: product
        });
    } catch (err) {
        console.error('L·ªói khi l·∫•y th√¥ng tin s·∫£n ph·∫©m:', err);
        res.status(500).render('error/500', {
            pageTitle: 'L·ªói',
            path: '/error',
            message: 'Kh√¥ng th·ªÉ t·∫£i th√¥ng tin s·∫£n ph·∫©m'
        });
    }
};

exports.postEditProduct = async (req, res, next) => {
    try {
        // Ki·ªÉm tra quy·ªÅn admin
        if (!req.session.user || req.session.user.role !== 'admin') {
            return res.status(403).render('error/403', {
                pageTitle: 'L·ªói',
                path: '/error',
                message: 'B·∫°n kh√¥ng c√≥ quy·ªÅn th·ª±c hi·ªán thao t√°c n√†y',
                isAuthenticated: req.session.user ? true : false,
                isAdmin: req.session.user && req.session.user.role === 'admin'
            });
        }

        const prodId = req.body.productId;
        const updatedTitle = req.body.title;
        const updatedPrice = parseFloat(req.body.price);
        const updatedDesc = req.body.description;
        const updatedStockQuantity = parseInt(req.body.stockQuantity);
        const updatedCategory = req.body.category;
        const updatedOrigin = req.body.origin;

        // L·∫•y s·∫£n ph·∫©m hi·ªán t·∫°i ƒë·ªÉ gi·ªØ l·∫°i imageUrl n·∫øu kh√¥ng upload file m·ªõi
        const currentProduct = await Product.findById(prodId);
        if (!currentProduct) {
            return res.status(404).render('error/404', {
                pageTitle: 'L·ªói',
                path: '/error',
                message: 'Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m',
                isAuthenticated: req.session.user ? true : false,
                isAdmin: req.session.user && req.session.user.role === 'admin'
            });
        }

        // N·∫øu c√≥ file m·ªõi th√¨ s·ª≠ d·ª•ng file m·ªõi, kh√¥ng th√¨ gi·ªØ file c≈©
        let updatedImageUrl = currentProduct.imageUrl;
        if (req.file) {
            // N·∫øu c√≥ file ·∫£nh m·ªõi, x√≥a file ·∫£nh c≈©
            if (currentProduct.imageUrl) {
                const oldImagePath = path.join(__dirname, '..', 'public', currentProduct.imageUrl);
                // Ki·ªÉm tra file t·ªìn t·∫°i tr∆∞·ªõc khi x√≥a
                if (fs.existsSync(oldImagePath)) {
                    fs.unlink(oldImagePath, (err) => {
                        if (err) {
                            console.error('L·ªói khi x√≥a ·∫£nh c≈©:', err);
                        }
                    });
                }
            }
            updatedImageUrl = '/public/images/products/' + req.file.filename;
        }

        // Fix Vietnamese text encoding before saving
        const fixedTitle = fixVietnameseTextForDB(updatedTitle);
        const fixedDescription = fixVietnameseTextForDB(updatedDesc);
        const fixedCategory = fixVietnameseTextForDB(updatedCategory);

        const product = new Product(
            prodId,
            fixedTitle,
            updatedImageUrl,
            fixedDescription,
            updatedPrice,
            updatedStockQuantity,
            fixedCategory,
            updatedOrigin
        );

        await product.save();
        res.redirect('/admin/products');
    } catch (err) {
        console.error('L·ªói khi c·∫≠p nh·∫≠t s·∫£n ph·∫©m:', err);
        res.status(500).render('error/500', {
            pageTitle: 'L·ªói',
            path: '/error',
            message: 'Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t s·∫£n ph·∫©m',
            isAuthenticated: req.session.user ? true : false,
            isAdmin: req.session.user && req.session.user.role === 'admin'
        });
    }
};

exports.postDeleteProduct = async (req, res, next) => {
    try {
        const prodId = req.body.productId;
        await Product.deleteById(prodId);
        res.redirect('/admin/products');
    } catch (err) {
        console.error('L·ªói khi x√≥a s·∫£n ph·∫©m:', err);
        res.status(500).render('error/500', {
            pageTitle: 'L·ªói',
            path: '/error',
            message: 'Kh√¥ng th·ªÉ x√≥a s·∫£n ph·∫©m'
        });
    }
};

exports.getExportProductsPDF = async (req, res, next) => {
    try {
        console.log('B·∫Øt ƒë·∫ßu xu·∫•t PDF danh s√°ch s·∫£n ph·∫©m');

        // L·∫•y danh s√°ch s·∫£n ph·∫©m v·ªõi ƒëi·ªÅu ki·ªán l·ªçc
        const { category, minPrice, maxPrice, sortBy } = req.query;
        let products = await Product.fetchAll();

        if (!products) {
            console.error('Kh√¥ng th·ªÉ l·∫•y danh s√°ch s·∫£n ph·∫©m');
            return res.status(500).render('error/500', {
                pageTitle: 'L·ªói',
                path: '/error',
                message: 'Kh√¥ng th·ªÉ l·∫•y danh s√°ch s·∫£n ph·∫©m'
            });
        }

        // √Åp d·ª•ng b·ªô l·ªçc n·∫øu c√≥
        if (category) {
            products = products.filter(p => p.category === category);
        }
        if (minPrice) {
            products = products.filter(p => p.price >= parseFloat(minPrice));
        }
        if (maxPrice) {
            products = products.filter(p => p.price <= parseFloat(maxPrice));
        }

        // S·∫Øp x·∫øp s·∫£n ph·∫©m
        if (sortBy) {
            switch (sortBy) {
                case 'price-asc':
                    products.sort((a, b) => (a.price || 0) - (b.price || 0));
                    break;
                case 'price-desc':
                    products.sort((a, b) => (b.price || 0) - (a.price || 0));
                    break;
                case 'name-asc':
                    products.sort((a, b) => (a.title || '').localeCompare(b.title || ''));
                    break;
                case 'name-desc':
                    products.sort((a, b) => (b.title || '').localeCompare(a.title || ''));
                    break;
            }
        }

        console.log(`ƒê√£ l·∫•y ƒë∆∞·ª£c ${products.length} s·∫£n ph·∫©m`);

        if (products.length === 0) {
            console.log('Kh√¥ng c√≥ s·∫£n ph·∫©m n√†o ƒë·ªÉ xu·∫•t PDF');
            return res.status(404).render('error/404', {
                pageTitle: 'Kh√¥ng c√≥ s·∫£n ph·∫©m',
                path: '/error',
                message: 'Kh√¥ng c√≥ s·∫£n ph·∫©m n√†o ph√π h·ª£p v·ªõi ti√™u ch√≠ t√¨m ki·∫øm'
            });
        }

        // T·∫°o PDF
        console.log('ƒêang t·∫°o PDF...');
        const pdfPath = await generateProductsPDF(products);
        console.log('ƒê√£ t·∫°o PDF th√†nh c√¥ng t·∫°i:', pdfPath);

        // Ki·ªÉm tra file c√≥ t·ªìn t·∫°i kh√¥ng
        if (!fs.existsSync(pdfPath)) {
            console.error('File PDF kh√¥ng t·ªìn t·∫°i sau khi t·∫°o:', pdfPath);
            return res.status(500).render('error/500', {
                pageTitle: 'L·ªói',
                path: '/error',
                message: 'Kh√¥ng th·ªÉ t·∫°o file PDF'
            });
        }

        // G·ª≠i file PDF v·ªÅ client
        console.log('ƒêang g·ª≠i file PDF v·ªÅ client...');
        const fileName = `products-list-${new Date().toISOString().slice(0, 10)}.pdf`;
        res.download(pdfPath, fileName, (err) => {
            if (err) {
                console.error('L·ªói khi t·∫£i file PDF:', err);
                return res.status(500).render('error/500', {
                    pageTitle: 'L·ªói',
                    path: '/error',
                    message: 'Kh√¥ng th·ªÉ t·∫£i xu·ªëng file PDF: ' + err.message
                });
            }
            console.log('ƒê√£ g·ª≠i file PDF th√†nh c√¥ng');

            // X√≥a file sau khi ƒë√£ g·ª≠i
            try {
                fs.unlink(pdfPath, (err) => {
                    if (err) {
                        console.error('L·ªói khi x√≥a file PDF:', err);
                    } else {
                        console.log('ƒê√£ x√≥a file PDF t·∫°m th·ªùi');
                    }
                });
            } catch (unlinkErr) {
                console.error('L·ªói khi x√≥a file PDF:', unlinkErr);
            }
        });
    } catch (err) {
        console.error('L·ªói khi xu·∫•t PDF danh s√°ch s·∫£n ph·∫©m:', err);
        res.status(500).render('error/500', {
            pageTitle: 'L·ªói',
            path: '/error',
            message: 'Kh√¥ng th·ªÉ xu·∫•t PDF danh s√°ch s·∫£n ph·∫©m: ' + err.message
        });
    }
};

exports.getExportProducts = async (req, res, next) => {
    try {
        console.log('B·∫Øt ƒë·∫ßu xu·∫•t Excel danh s√°ch s·∫£n ph·∫©m');

        // L·∫•y danh s√°ch s·∫£n ph·∫©m v·ªõi ƒëi·ªÅu ki·ªán l·ªçc
        const { search, category, sort } = req.query;
        let filter = {};
        
        if (search) {
            filter.$or = [
                { title: { $regex: search, $options: 'i' } },
                { description: { $regex: search, $options: 'i' } }
            ];
        }
        if (category) {
            filter.category = category;
        }

        let products = await Product.find(filter);

        if (!products) {
            console.error('Kh√¥ng th·ªÉ l·∫•y danh s√°ch s·∫£n ph·∫©m');
            return res.status(500).render('error/500', {
                pageTitle: 'L·ªói',
                path: '/error',
                message: 'Kh√¥ng th·ªÉ l·∫•y danh s√°ch s·∫£n ph·∫©m'
            });
        }

        // S·∫Øp x·∫øp s·∫£n ph·∫©m
        if (sort) {
            switch (sort) {
                case 'name_asc':
                    products.sort((a, b) => a.title.localeCompare(b.title));
                    break;
                case 'name_desc':
                    products.sort((a, b) => b.title.localeCompare(a.title));
                    break;
                case 'price_asc':
                    products.sort((a, b) => a.price - b.price);
                    break;
                case 'price_desc':
                    products.sort((a, b) => b.price - a.price);
                    break;
                case 'stock_asc':
                    products.sort((a, b) => a.stockQuantity - b.stockQuantity);
                    break;
                case 'stock_desc':
                    products.sort((a, b) => b.stockQuantity - a.stockQuantity);
                    break;
                default:
                    products.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));
            }
        }

        // T·∫°o CSV content
        const categories = {
            'dog': 'Ch√≥ c∆∞ng',
            'cat': 'M√®o c∆∞ng', 
            'fish': 'C√° c·∫£nh',
            'small-pets': 'Th√∫ nh·ªè'
        };

        let csvContent = 'T√™n s·∫£n ph·∫©m,Danh m·ª•c,Gi√° (VNƒê),M√¥ t·∫£,T·ªìn kho,Ng√†y t·∫°o\n';
        
        products.forEach(product => {
            const categoryName = categories[product.category] || product.category || 'Ch∆∞a ph√¢n lo·∫°i';
            const price = (product.price || 0).toLocaleString('vi-VN');
            const description = (product.description || '').replace(/"/g, '""'); // Escape quotes
            const stock = product.stockQuantity || 0;
            const createdAt = new Date(product.createdAt).toLocaleDateString('vi-VN');
            
            csvContent += `"${product.title}","${categoryName}","${price}","${description}","${stock}","${createdAt}"\n`;
        });

        // Set headers for CSV download
        res.setHeader('Content-Type', 'text/csv; charset=utf-8');
        res.setHeader('Content-Disposition', `attachment; filename="products-${Date.now()}.csv"`);
        
        // Send CSV content
        res.send(csvContent);
        
        console.log('ƒê√£ xu·∫•t Excel danh s√°ch s·∫£n ph·∫©m th√†nh c√¥ng');
    } catch (err) {
        console.error('L·ªói khi xu·∫•t Excel danh s√°ch s·∫£n ph·∫©m:', err);
        res.status(500).render('error/500', {
            pageTitle: 'L·ªói',
            path: '/error',
            message: 'Kh√¥ng th·ªÉ xu·∫•t Excel danh s√°ch s·∫£n ph·∫©m: ' + err.message
        });
    }
}; 