const User = require('../models/user');
const { sendPasswordChangeNotification, sendNewPassword, sendWelcomeEmail } = require('../util/email');

exports.getLogin = (req, res, next) => {
    // N·∫øu ƒë√£ ƒëƒÉng nh·∫≠p, redirect v·ªÅ trang tr∆∞·ªõc ƒë√≥ ho·∫∑c trang ch·ªß
    if (req.session.user) {
        const returnTo = req.session.returnTo || '/';
        delete req.session.returnTo;
        return res.redirect(returnTo);
    }
    
    res.render('auth/login', {
        path: '/login',
        pageTitle: 'ƒêƒÉng nh·∫≠p',
        error: null,
        isAuthenticated: req.session.user ? true : false,
        isAdmin: req.session.user && req.session.user.role === 'admin',
        user: req.session.user || null
    });
};

exports.postLogin = async (req, res, next) => {
    try {
        console.log('üîç Login attempt:', { email: req.body.email });
        
        const email = req.body.email;
        const password = req.body.password;
        
        // ===== VALIDATION D·ªÆ LI·ªÜU ƒê·∫¶U V√ÄO =====
        if (!email || !password) {
            return res.render('auth/login', {
                path: '/login',
                pageTitle: 'ƒêƒÉng nh·∫≠p',
                message: 'Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß email v√† m·∫≠t kh·∫©u',
                isAuthenticated: req.session.user ? true : false,
                isAdmin: req.session.user && req.session.user.role === 'admin',
                user: req.session.user || null
            });
        }

        // ===== X√ÅC TH·ª∞C USER =====
        const authResult = await User.authenticateUser(email, password);
        
        if (!authResult.success) {
            return res.render('auth/login', {
                path: '/login',
                pageTitle: 'ƒêƒÉng nh·∫≠p',
                message: authResult.message,
                isAuthenticated: req.session.user ? true : false,
                isAdmin: req.session.user && req.session.user.role === 'admin',
                user: req.session.user || null
            });
        }

        const user = authResult.user;
        
        // ===== L∆ØU USER V√ÄO SESSION =====
        req.session.user = {
            _id: user._id.toString(),
            name: user.name,
            email: user.email,
            role: user.role || 'user'
        };
        
        await req.session.save();
        console.log('‚úÖ User logged in successfully:', req.session.user);
        
        // ===== REDIRECT =====
        const returnTo = req.session.returnTo || '/';
        delete req.session.returnTo;
        
        if(user.role === 'admin') {
            return res.redirect('/admin/dashboard');
        }
        res.redirect(returnTo);
        
    } catch (err) {
        console.error('‚ùå L·ªói khi ƒëƒÉng nh·∫≠p:', err);
        res.render('auth/login', {
            path: '/login',
            pageTitle: 'ƒêƒÉng nh·∫≠p',
            message: 'C√≥ l·ªói x·∫£y ra khi ƒëƒÉng nh·∫≠p. Vui l√≤ng th·ª≠ l·∫°i.',
            isAuthenticated: req.session.user ? true : false,
            isAdmin: req.session.user && req.session.user.role === 'admin',
            user: req.session.user || null
        });
    }
};

// GET /forgot-password
exports.getForgotPassword = (req, res, next) => {
    res.render('auth/forgot-password', {
        path: '/forgot-password',
        pageTitle: 'Qu√™n m·∫≠t kh·∫©u',
        error: null,
        success: null,
        isAuthenticated: req.session.user ? true : false,
        isAdmin: req.session.user && req.session.user.role === 'admin',
        user: req.session.user || null
    });
};

// POST /forgot-password
exports.postForgotPassword = async (req, res, next) => {
    try {
        const { email } = req.body;
        
        if (!email) {
            return res.render('auth/forgot-password', {
                path: '/forgot-password',
                pageTitle: 'Qu√™n m·∫≠t kh·∫©u',
                error: 'Vui l√≤ng nh·∫≠p email c·ªßa b·∫°n',
                success: null,
                isAuthenticated: req.session.user ? true : false,
                isAdmin: req.session.user && req.session.user.role === 'admin',
                user: req.session.user || null
            });
        }

        // T√¨m user theo email
        const user = await User.findByEmail(email);
        if (!user) {
            // Kh√¥ng hi·ªÉn th·ªã l·ªói ƒë·ªÉ tr√°nh l·ªô th√¥ng tin
            return res.render('auth/forgot-password', {
                path: '/forgot-password',
                pageTitle: 'Qu√™n m·∫≠t kh·∫©u',
                error: null,
                success: 'N·∫øu email t·ªìn t·∫°i, ch√∫ng t√¥i ƒë√£ g·ª≠i m·∫≠t kh·∫©u m·ªõi ƒë·∫øn email c·ªßa b·∫°n',
                isAuthenticated: req.session.user ? true : false,
                isAdmin: req.session.user && req.session.user.role === 'admin',
                user: req.session.user || null
            });
        }

        // T·∫°o m·∫≠t kh·∫©u m·ªõi 6 s·ªë
        const newPassword = await User.generateNewPassword(user._id);
        
        // G·ª≠i email v·ªõi m·∫≠t kh·∫©u m·ªõi
        const emailSent = await sendNewPassword(user, newPassword);
        
        if (emailSent) {
            return res.render('auth/forgot-password', {
                path: '/forgot-password',
                pageTitle: 'Qu√™n m·∫≠t kh·∫©u',
                error: null,
                success: 'M·∫≠t kh·∫©u m·ªõi ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn email c·ªßa b·∫°n. Vui l√≤ng ki·ªÉm tra h·ªôp th∆∞ v√† ƒëƒÉng nh·∫≠p.',
                isAuthenticated: req.session.user ? true : false,
                isAdmin: req.session.user && req.session.user.role === 'admin',
                user: req.session.user || null
            });
        } else {
            return res.render('auth/forgot-password', {
                path: '/forgot-password',
                pageTitle: 'Qu√™n m·∫≠t kh·∫©u',
                error: 'C√≥ l·ªói x·∫£y ra khi g·ª≠i email. Vui l√≤ng th·ª≠ l·∫°i sau.',
                success: null,
                isAuthenticated: req.session.user ? true : false,
                isAdmin: req.session.user && req.session.user.role === 'admin',
                user: req.session.user || null
            });
        }
    } catch (err) {
        console.error('L·ªói khi x·ª≠ l√Ω qu√™n m·∫≠t kh·∫©u:', err);
        return res.render('auth/forgot-password', {
            path: '/forgot-password',
            pageTitle: 'Qu√™n m·∫≠t kh·∫©u',
            error: 'C√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i sau.',
            success: null,
            isAuthenticated: req.session.user ? true : false,
            isAdmin: req.session.user && req.session.user.role === 'admin',
            user: req.session.user || null
        });
    }
};



exports.postLogout = (req, res, next) => {
    req.session.destroy((err) => {
        if (err) {
            console.error('L·ªói khi ƒëƒÉng xu·∫•t:', err);
        }
        res.redirect('/');
    });
};

exports.getProfile = (req, res, next) => {
    if (!req.session.user) {
        return res.redirect('/auth/login');
    }
    res.render('profile', {
        path: '/profile',
        pageTitle: 'Th√¥ng tin c√° nh√¢n',
        user: req.session.user,
        isAuthenticated: true,
        isAdmin: req.session.user && req.session.user.role === 'admin'
    });
};

exports.getProfileEdit = (req, res, next) => {
    if (!req.session.user) {
        return res.redirect('/auth/login');
    }
    res.render('profile-edit', {
        path: '/profile/edit',
        pageTitle: 'Ch·ªânh s·ª≠a th√¥ng tin c√° nh√¢n',
        user: req.session.user,
        error: null,
        success: null,
        isAuthenticated: true,
        isAdmin: req.session.user && req.session.user.role === 'admin'
    });
};

exports.postProfileEdit = async (req, res, next) => {
    try {
        const userId = req.session.user._id;
        const newName = req.body.name;
        
        // C·∫≠p nh·∫≠t t√™n ng∆∞·ªùi d√πng trong DB
        await User.updateName(userId, newName);
        
        // C·∫≠p nh·∫≠t session
        req.session.user.name = newName;
        await req.session.save();
        
        res.render('profile-edit', {
            path: '/profile/edit',
            pageTitle: 'Ch·ªânh s·ª≠a th√¥ng tin c√° nh√¢n',
            user: req.session.user,
            error: null,
            success: 'C·∫≠p nh·∫≠t th√¥ng tin th√†nh c√¥ng',
            isAuthenticated: true,
            isAdmin: req.session.user && req.session.user.role === 'admin'
        });
    } catch (err) {
        console.error(err);
        res.render('profile-edit', {
            path: '/profile/edit',
            pageTitle: 'Ch·ªânh s·ª≠a th√¥ng tin c√° nh√¢n',
            user: req.session.user,
            message: 'C√≥ l·ªói x·∫£y ra khi c·∫≠p nh·∫≠t th√¥ng tin',
            success: null,
            isAuthenticated: true,
            isAdmin: req.session.user && req.session.user.role === 'admin'
        });
    }
};

exports.getChangePassword = (req, res, next) => {
    if (!req.session.user) {
        return res.redirect('/auth/login');
    }
    res.render('profile-change-password', {
        path: '/profile/change-password',
        pageTitle: 'ƒê·ªïi m·∫≠t kh·∫©u',
        error: null,
        success: null,
        isAuthenticated: true,
        isAdmin: req.session.user && req.session.user.role === 'admin',
        user: req.session.user
    });
};

exports.postChangePassword = async (req, res, next) => {
    try {
        const userId = req.session.user._id;
        const oldPassword = req.body.oldPassword;
        const newPassword = req.body.newPassword;
        
        // Ki·ªÉm tra m·∫≠t kh·∫©u c≈©
        const user = await User.findById(userId);
        if (!user) {
            return res.render('profile-change-password', {
                path: '/profile/change-password',
                pageTitle: 'ƒê·ªïi m·∫≠t kh·∫©u',
                message: 'Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i',
                success: null,
                isAuthenticated: true,
                isAdmin: req.session.user && req.session.user.role === 'admin',
                user: req.session.user
            });
        }
        
        // C·∫≠p nh·∫≠t m·∫≠t kh·∫©u
        await User.updatePassword(userId, newPassword);
        
        // G·ª≠i email th√¥ng b√°o
        await sendPasswordChangeNotification(user, newPassword);
        
        res.render('profile-change-password', {
            path: '/profile/change-password',
            pageTitle: 'ƒê·ªïi m·∫≠t kh·∫©u',
            error: null,
            success: 'ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng',
            isAuthenticated: true,
            isAdmin: req.session.user && req.session.user.role === 'admin',
            user: req.session.user
        });
    } catch (err) {
        console.error(err);
        res.render('profile-change-password', {
            path: '/profile/change-password',
            pageTitle: 'ƒê·ªïi m·∫≠t kh·∫©u',
            message: 'C√≥ l·ªói x·∫£y ra khi ƒë·ªïi m·∫≠t kh·∫©u',
            success: null,
            isAuthenticated: true,
            isAdmin: req.session.user && req.session.user.role === 'admin',
            user: req.session.user
        });
    }
};

exports.getSignup = (req, res, next) => {
    if (req.session.user) {
        const returnTo = req.session.returnTo || '/';
        delete req.session.returnTo;
        return res.redirect(returnTo);
    }
    res.render('auth/signup', {
        path: '/signup',
        pageTitle: 'ƒêƒÉng k√Ω',
        message: null,
        isAuthenticated: false,
        isAdmin: false,
        user: null
    });
};

exports.postSignup = async (req, res, next) => {
    try {
        const { name, email, password, confirmPassword, phone, address } = req.body;
        
        // ===== VALIDATION D·ªÆ LI·ªÜU ƒê·∫¶U V√ÄO =====
        if (!name || !email || !password || !confirmPassword) {
            return res.render('auth/signup', {
                path: '/signup',
                pageTitle: 'ƒêƒÉng k√Ω',
                message: 'Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin b·∫Øt bu·ªôc',
                isAuthenticated: req.session.user ? true : false,
                isAdmin: req.session.user && req.session.user.role === 'admin',
                user: req.session.user || null
            });
        }

        if (password !== confirmPassword) {
            return res.render('auth/signup', {
                path: '/signup',
                pageTitle: 'ƒêƒÉng k√Ω',
                message: 'M·∫≠t kh·∫©u x√°c nh·∫≠n kh√¥ng kh·ªõp',
                isAuthenticated: req.session.user ? true : false,
                isAdmin: req.session.user && req.session.user.role === 'admin',
                user: req.session.user || null
            });
        }

        // ===== T·∫†O USER M·ªöI =====
        const user = new User(name, email, password, 'user', []);
        
        try {
            await user.save();
            console.log('‚úÖ User ƒëƒÉng k√Ω th√†nh c√¥ng:', email);
            
            // ===== G·ª¨I EMAIL CH√ÄO M·ª™NG =====
            try {
                await sendWelcomeEmail(user);
            } catch (emailError) {
                console.error('‚ùå L·ªói khi g·ª≠i email ch√†o m·ª´ng:', emailError);
            }
            
            // ===== REDIRECT V·ªÄ LOGIN =====
            req.flash('success', 'ƒêƒÉng k√Ω th√†nh c√¥ng! Vui l√≤ng ƒëƒÉng nh·∫≠p.');
            res.redirect('/auth/login');
            
        } catch (userError) {
            console.error('‚ùå L·ªói khi t·∫°o user:', userError);
            
            let errorMessage = 'C√≥ l·ªói x·∫£y ra khi ƒëƒÉng k√Ω';
            
            if (userError.message.includes('Email ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng')) {
                errorMessage = 'Email ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng';
            } else if (userError.message.includes('M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t')) {
                errorMessage = userError.message;
            } else if (userError.message.includes('M·∫≠t kh·∫©u qu√° y·∫øu')) {
                errorMessage = userError.message;
            } else if (userError.message.includes('M·∫≠t kh·∫©u kh√¥ng ƒë∆∞·ª£c ch·ª©a th√¥ng tin c√° nh√¢n')) {
                errorMessage = userError.message;
            } else if (userError.message.includes('M·∫≠t kh·∫©u ph·∫£i ch·ª©a √≠t nh·∫•t')) {
                errorMessage = userError.message;
            }
            
            return res.render('auth/signup', {
                path: '/signup',
                pageTitle: 'ƒêƒÉng k√Ω',
                message: errorMessage,
                isAuthenticated: req.session.user ? true : false,
                isAdmin: req.session.user && req.session.user.role === 'admin',
                user: req.session.user || null
            });
        }
        
    } catch (err) {
        console.error('‚ùå L·ªói khi ƒëƒÉng k√Ω:', err);
        res.render('auth/signup', {
            path: '/signup',
            pageTitle: 'ƒêƒÉng k√Ω',
            message: 'C√≥ l·ªói x·∫£y ra khi ƒëƒÉng k√Ω. Vui l√≤ng th·ª≠ l·∫°i.',
            isAuthenticated: req.session.user ? true : false,
            isAdmin: req.session.user && req.session.user.role === 'admin',
            user: req.session.user || null
        });
    }
};