const Contact = require('../models/contact');
const emailService = require('../util/email-service');

exports.subscribe = async (req, res, next) => {
    try {
        const { email } = req.body;
        const ipAddress = req.ip || req.connection.remoteAddress;

        // ===== VALIDATION D·ªÆ LI·ªÜU ƒê·∫¶U V√ÄO =====
        if (!email || !email.trim()) {
            return res.status(400).json({
                success: false,
                message: 'Vui l√≤ng nh·∫≠p email'
            });
        }

        // ===== KI·ªÇM TRA ƒê·ªäNH D·∫†NG EMAIL =====
        const emailRegex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/;
        if (!emailRegex.test(email)) {
            return res.status(400).json({
                success: false,
                message: 'Email kh√¥ng h·ª£p l·ªá'
            });
        }

        // ===== KI·ªÇM TRA SPAM V√Ä RATE LIMITING =====
        const spamCheck = await Contact.checkSpamAndRateLimit(email, 'newsletter', ipAddress);
        if (!spamCheck.allowed) {
            return res.status(429).json({
                success: false,
                message: spamCheck.message
            });
        }

        // ===== KI·ªÇM TRA EMAIL ƒê√É ƒêƒÇNG K√ù CH∆ØA =====
        const existingContact = await Contact.findByEmail(email, 'newsletter');
        if (existingContact) {
            if (existingContact.status === 'approved') {
                return res.status(400).json({
                    success: false,
                    message: 'Email n√†y ƒë√£ ƒë∆∞·ª£c ƒëƒÉng k√Ω newsletter'
                });
            } else if (existingContact.status === 'pending') {
                return res.status(400).json({
                    success: false,
                    message: 'Email n√†y ƒëang ch·ªù x√°c nh·∫≠n. Vui l√≤ng ki·ªÉm tra email c·ªßa b·∫°n.'
                });
            } else if (existingContact.status === 'rejected') {
                return res.status(400).json({
                    success: false,
                    message: 'Email n√†y ƒë√£ b·ªã t·ª´ ch·ªëi ƒëƒÉng k√Ω newsletter'
                });
            }
        }

        // ===== T·∫†O NEWSLETTER SUBSCRIPTION =====
        const contact = new Contact({
            email: email.trim().toLowerCase(),
            type: 'newsletter',
            status: 'pending',
            ipAddress: ipAddress
        });

        const savedContact = await contact.save();

        // ===== G·ª¨I EMAIL X√ÅC NH·∫¨N =====
        try {
            await emailService.sendNewsletterConfirmation({
                email: savedContact.email,
                subscriptionId: savedContact._id
            });
        } catch (emailError) {
            console.error('L·ªói khi g·ª≠i email x√°c nh·∫≠n newsletter:', emailError);
        }

        console.log(`üìß Newsletter subscription m·ªõi: ${email}`);

        res.json({
            success: true,
            message: 'ƒêƒÉng k√Ω newsletter th√†nh c√¥ng! Vui l√≤ng ki·ªÉm tra email ƒë·ªÉ x√°c nh·∫≠n.'
        });

    } catch (err) {
        console.error('L·ªói khi ƒëƒÉng k√Ω newsletter:', err);
        
        if (err.message.includes('Email kh√¥ng h·ª£p l·ªá')) {
            return res.status(400).json({
                success: false,
                message: 'Email kh√¥ng h·ª£p l·ªá'
            });
        }

        res.status(500).json({
            success: false,
            message: 'C√≥ l·ªói x·∫£y ra khi ƒëƒÉng k√Ω newsletter. Vui l√≤ng th·ª≠ l·∫°i sau.'
        });
    }
};

exports.unsubscribe = async (req, res, next) => {
    try {
        const { email } = req.query;

        if (!email) {
            return res.status(400).json({
                success: false,
                message: 'Email kh√¥ng ƒë∆∞·ª£c cung c·∫•p'
            });
        }

        const result = await Contact.unsubscribe(email);

        if (result.matchedCount === 0) {
            return res.status(404).json({
                success: false,
                message: 'Email n√†y ch∆∞a ƒë∆∞·ª£c ƒëƒÉng k√Ω nh·∫≠n tin t·ª©c'
            });
        }

        res.status(200).json({
            success: true,
            message: 'ƒê√£ h·ªßy ƒëƒÉng k√Ω nh·∫≠n tin t·ª©c th√†nh c√¥ng'
        });

    } catch (error) {
        console.error('‚ùå L·ªói h·ªßy ƒëƒÉng k√Ω newsletter:', error);
        res.status(500).json({
            success: false,
            message: 'C√≥ l·ªói x·∫£y ra khi h·ªßy ƒëƒÉng k√Ω. Vui l√≤ng th·ª≠ l·∫°i sau.'
        });
    }
};

exports.getSubscriberCount = async (req, res, next) => {
    try {
        const count = await Contact.getNewsletterSubscriberCount();
        res.status(200).json({
            success: true,
            count: count
        });
    } catch (error) {
        console.error('‚ùå L·ªói l·∫•y s·ªë l∆∞·ª£ng subscriber:', error);
        res.status(500).json({
            success: false,
            message: 'C√≥ l·ªói x·∫£y ra khi l·∫•y th√¥ng tin'
        });
    }
}; 