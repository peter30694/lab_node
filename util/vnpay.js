const crypto = require('crypto');
const moment = require('moment');

class VNPay {
    constructor() {
        // Ki·ªÉm tra environment variables
        if (!process.env.VNPAY_TMN_CODE || !process.env.VNPAY_HASH_SECRET) {
            throw new Error('VNPay configuration missing: TMN_CODE or HASH_SECRET not found');
        }
        if (!process.env.VNPAY_URL || !process.env.VNPAY_RETURN_URL) {
            throw new Error('VNPay configuration missing: URL or RETURN_URL not found');
        }
        
        this.vnp_TmnCode = process.env.VNPAY_TMN_CODE;
        this.vnp_HashSecret = process.env.VNPAY_HASH_SECRET;
        this.vnp_Url = process.env.VNPAY_URL;
        this.vnp_ReturnUrl = process.env.VNPAY_RETURN_URL;
        this.vnp_IpnUrl = process.env.VNPAY_IPN_URL;
        
        // Ki·ªÉm tra m√¥i tr∆∞·ªùng sandbox
        this.isSandbox = process.env.NODE_ENV === 'development' || 
                        process.env.VNPAY_URL.includes('sandbox') ||
                        process.env.VNPAY_SANDBOX === 'true';
        
        if (this.isSandbox) {
            console.log('üß™ VNPay ƒëang ch·∫°y ·ªü ch·∫ø ƒë·ªô SANDBOX - Validation ƒë∆∞·ª£c n·ªõi l·ªèng');
        }
    }

    // T·∫°o URL thanh to√°n
    createPaymentUrl(orderId, amount, orderInfo, ipAddr, locale = 'vn') {
        // Validate inputs - n·ªõi l·ªèng cho sandbox
        if (!orderId) {
            if (this.isSandbox) {
                console.warn('‚ö†Ô∏è SANDBOX: Order ID tr·ªëng, t·ª± ƒë·ªông t·∫°o ID');
                orderId = 'TEST_' + Date.now();
            } else {
                throw new Error('Order ID kh√¥ng h·ª£p l·ªá');
            }
        }
        
        if (typeof orderId !== 'string') {
            orderId = String(orderId);
        }
        
        if (orderId.trim().length === 0) {
            if (this.isSandbox) {
                orderId = 'TEST_' + Date.now();
            } else {
                throw new Error('Order ID kh√¥ng h·ª£p l·ªá');
            }
        }

        if (!orderInfo) {
            if (this.isSandbox) {
                console.warn('‚ö†Ô∏è SANDBOX: Order info tr·ªëng, s·ª≠ d·ª•ng m·∫∑c ƒë·ªãnh');
                orderInfo = `Test order ${orderId}`;
            } else {
                throw new Error('Th√¥ng tin ƒë∆°n h√†ng kh√¥ng h·ª£p l·ªá');
            }
        }
        
        if (typeof orderInfo !== 'string') {
            orderInfo = String(orderInfo);
        }
        
        // N·ªõi l·ªèng gi·ªõi h·∫°n ƒë·ªô d√†i cho sandbox
        if (orderInfo.length > 255) {
            if (this.isSandbox) {
                console.warn('‚ö†Ô∏è SANDBOX: Order info qu√° d√†i, c·∫Øt ng·∫Øn');
                orderInfo = orderInfo.substring(0, 255);
            } else {
                throw new Error('Th√¥ng tin ƒë∆°n h√†ng kh√¥ng h·ª£p l·ªá (t·ªëi ƒëa 255 k√Ω t·ª±)');
            }
        }

        if (!ipAddr) {
            if (this.isSandbox) {
                console.warn('‚ö†Ô∏è SANDBOX: IP Address tr·ªëng, s·ª≠ d·ª•ng localhost');
                ipAddr = '127.0.0.1';
            } else {
                throw new Error('IP Address kh√¥ng h·ª£p l·ªá');
            }
        }
        
        if (typeof ipAddr !== 'string') {
            ipAddr = String(ipAddr);
        }

        // N·ªõi l·ªèng validation s·ªë ti·ªÅn cho sandbox
        if (!amount || typeof amount !== 'number') {
            if (this.isSandbox) {
                console.warn('‚ö†Ô∏è SANDBOX: Amount kh√¥ng h·ª£p l·ªá, s·ª≠ d·ª•ng 10,000 VND');
                amount = 10000;
            } else {
                throw new Error('S·ªë ti·ªÅn kh√¥ng h·ª£p l·ªá');
            }
        }
        
        // N·ªõi l·ªèng gi·ªõi h·∫°n s·ªë ti·ªÅn cho sandbox
        if (this.isSandbox) {
            // Cho ph√©p t·ª´ 1,000 VND ƒë·∫øn 10 t·ª∑ VND trong sandbox
            if (amount < 1000) {
                console.warn('‚ö†Ô∏è SANDBOX: S·ªë ti·ªÅn qu√° nh·ªè, ƒëi·ªÅu ch·ªânh th√†nh 1,000 VND');
                amount = 1000;
            }
            if (amount >= 10000000000) {
                console.warn('‚ö†Ô∏è SANDBOX: S·ªë ti·ªÅn qu√° l·ªõn, ƒëi·ªÅu ch·ªânh th√†nh 999,999,999 VND');
                amount = 999999999;
            }
        } else {
            // Production validation nghi√™m ng·∫∑t
            if (amount < 5000 || amount >= 1000000000) {
                throw new Error('S·ªë ti·ªÅn kh√¥ng h·ª£p l·ªá. Ph·∫£i t·ª´ 5,000 ƒë·∫øn d∆∞·ªõi 1 t·ª∑ VND');
            }
        }

        const createDate = moment().format('YYYYMMDDHHmmss');

        const vnp_Params = {
            vnp_Version: '2.1.0',
            vnp_Command: 'pay',
            vnp_TmnCode: this.vnp_TmnCode,
            vnp_Locale: locale,
            vnp_CurrCode: 'VND',
            vnp_TxnRef: orderId,
            vnp_OrderInfo: orderInfo,
            vnp_OrderType: 'other',
            vnp_Amount: amount * 100, // ƒê∆°n v·ªã: x100
            vnp_ReturnUrl: this.vnp_ReturnUrl,
            vnp_IpAddr: ipAddr,
            vnp_CreateDate: createDate
        };

        // S·∫Øp x·∫øp tham s·ªë theo th·ª© t·ª± alphabet
        const sortedParams = this.sortObject(vnp_Params);

        // T·∫°o chu·ªói d·ªØ li·ªáu ƒë·ªÉ k√Ω
        const signData = new URLSearchParams(sortedParams).toString();

        // T·∫°o secure hash (ch·ªØ k√Ω)
        const hmac = crypto.createHmac('sha512', this.vnp_HashSecret);
        const signed = hmac.update(Buffer.from(signData, 'utf-8')).digest('hex');

        // Th√™m vnp_SecureHash v√†o tham s·ªë
        sortedParams.vnp_SecureHash = signed;

        // T·∫°o URL thanh to√°n cu·ªëi c√πng
        const paymentUrl = `${this.vnp_Url}?${new URLSearchParams(sortedParams).toString()}`;
        
        if (this.isSandbox) {
            console.log('üß™ SANDBOX Payment URL created:', paymentUrl);
        }
        
        return paymentUrl;
    }

    // X√°c th·ª±c ch·ªØ k√Ω t·ª´ VNPay (khi return)
    verifyReturnUrl(vnp_Params) {
        if (this.isSandbox) {
            console.log('üß™ SANDBOX: VNPay Signature Verification (Relaxed Mode)');
        } else {
            console.log('=== VNPay Signature Verification Debug ===');
        }
        
        // Clone object ƒë·ªÉ kh√¥ng modify object g·ªëc
        const params = { ...vnp_Params };
        const receivedHash = params['vnp_SecureHash'];
        
        console.log('Received hash:', receivedHash);
        
        // N·ªõi l·ªèng validation cho sandbox
        if (!receivedHash) {
            if (this.isSandbox) {
                console.warn('‚ö†Ô∏è SANDBOX: Missing vnp_SecureHash - B·ªè qua ki·ªÉm tra ch·ªØ k√Ω');
                return true; // B·ªè qua ki·ªÉm tra ch·ªØ k√Ω trong sandbox
            } else {
                console.log('‚ùå Missing vnp_SecureHash');
                throw new Error('Thi·∫øu vnp_SecureHash trong response');
            }
        }
        
        delete params['vnp_SecureHash'];
        delete params['vnp_SecureHashType'];

        const sortedParams = this.sortObject(params);
        console.log('Sorted params for signing:', sortedParams);
        
        const signData = new URLSearchParams(sortedParams).toString();
        console.log('Sign data string:', signData);
        console.log('Hash secret (first 10 chars):', this.vnp_HashSecret.substring(0, 10) + '...');

        const hmac = crypto.createHmac('sha512', this.vnp_HashSecret);
        const signed = hmac.update(Buffer.from(signData, 'utf-8')).digest('hex');
        
        console.log('Generated hash:', signed);
        console.log('Hashes match:', signed === receivedHash);
        
        if (this.isSandbox) {
            console.log('üß™ SANDBOX: Signature verification completed');
            // Trong sandbox, n·∫øu ch·ªØ k√Ω kh√¥ng kh·ªõp, ch·ªâ c·∫£nh b√°o ch·ª© kh√¥ng fail
            if (signed !== receivedHash) {
                console.warn('‚ö†Ô∏è SANDBOX: Ch·ªØ k√Ω kh√¥ng kh·ªõp nh∆∞ng v·∫´n cho ph√©p ti·∫øp t·ª•c');
                return true; // Cho ph√©p ti·∫øp t·ª•c trong sandbox
            }
        } else {
            console.log('=== End Signature Verification Debug ===');
        }

        return signed === receivedHash;
    }

    // S·∫Øp x·∫øp tham s·ªë
    sortObject(obj) {
        const sorted = {};
        Object.keys(obj)
            .sort()
            .forEach((key) => {
                sorted[key] = typeof obj[key] === 'string' ? obj[key] : String(obj[key]);
            });
        return sorted;
    }

    // L·∫•y th√¥ng b√°o t·ª´ m√£ ph·∫£n h·ªìi VNPay
    getResponseMessage(responseCode) {
        const messages = {
            '00': 'Giao d·ªãch th√†nh c√¥ng',
            '07': 'Tr·ª´ ti·ªÅn th√†nh c√¥ng. Giao d·ªãch b·ªã nghi ng·ªù.',
            '09': 'Th·∫ª/T√†i kho·∫£n ch∆∞a ƒëƒÉng k√Ω Internet Banking.',
            '10': 'X√°c th·ª±c th√¥ng tin sai qu√° 3 l·∫ßn.',
            '11': 'H·∫øt th·ªùi gian thanh to√°n.',
            '12': 'Th·∫ª/T√†i kho·∫£n b·ªã kh√≥a.',
            '13': 'Sai m·∫≠t kh·∫©u OTP.',
            '24': 'Kh√°ch h√†ng h·ªßy giao d·ªãch.',
            '51': 'Kh√¥ng ƒë·ªß s·ªë d∆∞.',
            '65': 'V∆∞·ª£t h·∫°n m·ª©c giao d·ªãch.',
            '75': 'Ng√¢n h√†ng b·∫£o tr√¨.',
            '79': 'Nh·∫≠p sai m·∫≠t kh·∫©u qu√° s·ªë l·∫ßn quy ƒë·ªãnh.',
            '99': 'L·ªói kh√°c (kh√¥ng x√°c ƒë·ªãnh)'
        };
        
        // Th√™m m·ªôt s·ªë m√£ test cho sandbox
        if (this.isSandbox) {
            const sandboxMessages = {
                'TEST_SUCCESS': 'Test giao d·ªãch th√†nh c√¥ng',
                'TEST_FAIL': 'Test giao d·ªãch th·∫•t b·∫°i',
                ...messages
            };
            return sandboxMessages[responseCode] || 'Test - L·ªói kh√¥ng x√°c ƒë·ªãnh';
        }
        
        return messages[responseCode] || 'L·ªói kh√¥ng x√°c ƒë·ªãnh';
    }

    // Th√™m method ƒë·ªÉ test trong sandbox
    createTestPaymentUrl(orderId = null, amount = 10000) {
        if (!this.isSandbox) {
            throw new Error('Test method ch·ªâ kh·∫£ d·ª•ng trong sandbox');
        }
        
        console.log('üß™ T·∫°o test payment URL cho sandbox');
        
        return this.createPaymentUrl(
            orderId || 'TEST_' + Date.now(),
            amount,
            'Test payment for sandbox',
            '127.0.0.1'
        );
    }
}

module.exports = VNPay;
